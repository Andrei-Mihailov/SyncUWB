function signal = Receive(Noise_signal_input,Q,N_data,L_pr)
    
    c = 1;
    Sum = [];
    mode = 0;
    flag = 0;
    count = 0;
    Point = [];
    start_data = 0;
    flag_count = 0;
    
    % подсчет информационных строк массива
    Compare_signal = Comparator(Noise_signal_input,0);
    signal = zeros(size(Compare_signal,1),size(Compare_signal,2));
    for i = 1:size(Compare_signal,1)
        Sum(i) = 2*sum(Compare_signal(i,:))/size(Compare_signal,2);
        if Sum(i) >= 0.7
            Point(c) = i;
            c = c + 1;
        end
    end
    c = size(Point,2);
    Data_signal = Comparator(Compare_signal(Point,:),1);
    
    % прием сигнала
    for i = 1 : size(Compare_signal,1)*size(Compare_signal,2)
        if flag == 1% принимаем через Q отсчетов после предыдущего импульса
            if i == strt + Q
                signal(i) = Compare_signal(i);
                count = count + 1;
            else if i == strt + Q + 1
                    signal(i) = Compare_signal(i);
                    flag = 0;
                    count = count + 1;
                    flag_count = flag_count + 1;
                end
            end
        else if flag == 0
                % принимаем по 3 отсчета пока не нашли 1 импульс (flag = 0)
                if count < 3
                    signal(i) = Compare_signal(i);
                    count = count + 1;
                else % пропускаем каждый 4 отсчет и проверяем принятые 3
                    count = 0;
                    signal(i) = 0;
                    [strt, flag, ~] = Search_Impuls(signal, i, mode, 0);
                end
            end
        end
        if (i > size(Compare_signal,1)*size(Compare_signal,2) - Q*N_data-1)&&(flag_count > L_pr)&&...
            (strt > size(Compare_signal,1)*size(Compare_signal,2) - Q*N_data-Q)
            % рассчет указателя начала данных
%             if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data-Q)&&...
%                (strt < size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data)
%                 if (mod((strt - start_data),Q) == 0)||(mod(strt,Q) == Point(1))
%                     start_data = strt+Q;
%                 else 
%                     if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data-Q/2)
%                         start_data = start_data + round((strt - start_data)/Q)*Q+1;
%                     else
%                         start_data = start_data + round((strt - start_data)/Q)*Q+Q+1;
%                     end
%                 end
%             else if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data-Q)&&(mod(strt,Q) == Point(1))
%                     if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data+Q)
%                         start_data = strt-Q;
%                     else
%                         start_data = strt;
%                     end
%                 else if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data-Q)&&(mod(strt,Q) == Point(2))
%                         if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data+Q)
%                             start_data = strt-Q-1;
%                         else
%                             start_data = strt-1;
%                         end
%                     else
%                         if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data-1)
%                             factor = strt - size(Compare_signal,1)*size(Compare_signal,2)+Q*N_data;
%                             factor = round(factor/Q);
%                             start_data = start_data + round((strt - start_data)/Q)*Q-factor*Q+1;
%                         else
%                             start_data = start_data + round((strt - start_data)/Q)*Q+1;
%                         end
%                     end
%                 end
                if (strt > size(Compare_signal,1)*size(Compare_signal,2)-Q*N_data)
                    factor = strt - size(Compare_signal,1)*size(Compare_signal,2)+Q*N_data;
                    factor = round(factor/Q);
                    start_data = start_data + round((strt - start_data)/Q)*Q-factor*Q+1;
                else
                    start_data = start_data + round((strt - start_data)/Q)*Q+1;
                end
            end

            signal(i) = Receive_Data(Compare_signal(Point(1):Point(c),2001:end),start_data,Q);
        end
    end
end